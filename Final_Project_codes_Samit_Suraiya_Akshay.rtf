{\rtf1\ansi\ansicpg1252\cocoartf2576
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww28600\viewh18000\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 # ***********************************************************************************************************\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 # Problem 1\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 # ***********************************************************************************************************\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 cat("\\014")          # clear Console\
remove(list = ls())  # clear Environment\
library('glue')      # importing library\
\
# assigning values for p\
p = c(0.01, 0.025, 0.05, 0.1, 0.2, 0.4, 0.5)\
# defining the function: \
f <- function(p)\{\
  return(log(0.01)/(log(1-p) + log(p)))\
\}\
# this function will evaluate Pr[X(1) \uc0\u8804  Qp \u8804  X(n)]:\
verify <- function(p,n)\{\
  return(1 - (1-p)**n - p**n)\
\}\
N = 10000\
# finding the minimum values of n for Pr[X(1) \uc0\u8804  Qp \u8804  X(n)] \u8805  0.99 with different probabilities\
print('Problem 1(b)')\
print('For Pr[X(1) \uc0\u8804  Qp \u8804  X(n)] \u8805  0.99:')\
for (i in p)\{\
  for (j in ceiling(f(i)):N)\{\
    if (verify(i,j) >= 0.99)\{\
      print(glue('p = \{format(round(i, 3), nsmall = 3)\}, n = \{j\}'))\
      break\
    \}\
  \}\
\}\
# finding the minimum values of n for Pr[X(1) \uc0\u8804  Qp \u8804  X(n)] \u8805  0.999 with different probabilities\
print('=======================================================')\
print('Problem 1(c)')\
print('For Pr[X(1) \uc0\u8804  Qp \u8804  X(n)] \u8805  0.999:')\
for (i in p)\{\
  for (j in ceiling(f(i)):N)\{\
    if (verify(i,j) >= 0.999)\{\
      print(glue('p = \{format(round(i, 3), nsmall = 3)\}, n = \{j\}'))\
      break\
    \}\
  \}\
\}\
print('=======================================================')\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 # ***********************************************************************************************************\
# Problem 3\
# ***********************************************************************************************************\
cat("\\014")          # clear Console\
remove(list = ls())  # clear Environment\
library('glue')      # importing library\
library("quantmod")\
\
#Obtain stock prices of Walmart and Amazon for past three years:\
getSymbols(c("WMT","AMZN"),from="2017-10-31",to="2020-10-30")\
WMT.returns=as.numeric(dailyReturn(WMT)) #obtain daily return values\
AMZN.returns=as.numeric(dailyReturn(AMZN)) #obtain daily return values\
days=as.Date(.indexday(WMT)) #obtain trading days\
\
plot(days,WMT.returns,type="l",ylab="daily returns",lwd=2)\
lines(days,AMZN.returns,col=2,lwd=1.5) #overlay return values\
legend("topright",legend=c("WMT","AMZN"),col=1:2,lty=1)\
summary(cbind(WMT.returns,AMZN.returns)) #summary values\
cov(cbind(WMT.returns, AMZN.returns))\
\
print('Problem 3(a)')\
print('=======================================================')\
X1 = WMT.returns\
X2 = AMZN.returns\
\
mu1 = mean(X1)\
mu2 = mean(X2) \
s1  = sd(X1)\
s2  = sd(X2)\
rho = cor(X1,X2)\
print(glue('\uc0\u956 1 = \{mu1\}'))\
print(glue('\uc0\u956 2 = \{mu2\}'))\
print(glue('\uc0\u963 1 = \{s1\}'))\
print(glue('\uc0\u963 2 = \{s2\}'))\
print(glue('\uc0\u961   = \{rho\}'))\
\
c0 = mu2\
c1 = mu1 - mu2\
a = s1**2 + s2**2 - 2*rho*s1*s2\
b = s2**2 - rho*s1*s2\
c = s2**2\
print(glue('c0 = \{c0\}'))\
print(glue('c1 = \{c1\}'))\
print(glue('a  = \{a\}'))\
print(glue('b  = \{b\}'))\
print(glue('c  = \{c\}'))\
\
print('=======================================================')\
print('Problem 3(b)')\
print('=======================================================')\
# defining the function: \uc0\u956 (w) = c0+c1w\
mu <- function(w)\{\
  return(c0+c1*w)\
\}\
# defining the function: \uc0\u963 ^2(w) = aw^2 \u8722 2bw+c\
sig_sq <- function(w)\{\
  return(a*w**2-2*b*w+c)\
\}\
# finding the optimal w\'88\
for (w in seq(0,1,l=10001))\{\
  if(sig_sq(w) <= s1**2)\{\
    opt_w = w\
    break\
  \}\
\}\
print('Optimal \uc0\u969 \'88:')\
print(opt_w)\
print('\uc0\u956 (\u969 \'88):')\
print(mu(opt_w))\
print('\uc0\u963 (\u969 \'88):')\
print(sqrt(sig_sq(opt_w)))\
print('=======================================================')\
print('Problem 3(c)')\
print('=======================================================')\
quant.WMT  = quantile(-X1, probs = c(0.95, 0.975, 0.99))\
quant.AMZN = quantile(-X2, probs = c(0.95, 0.975, 0.99))\
my_names <- c("VaR_0.95", "VaR_0.975", "VaR_0.95")\
names(quant.WMT) <- my_names\
names(quant.AMZN) <- my_names\
print('For WALMART')\
print(quant.WMT)\
print('For AMAZON')\
print(quant.AMZN)\
print('=======================================================')\
print('Problem 3(d)')\
# defining the function: X(w) = wX1 + (1 \uc0\u8722  w)X2\
X <- function(w)\{\
  return(w*X1 + (1-w)*X2)\
\}\
# finding optimal w, \uc0\u956 (\u969 \'88), \u963 (\u969 \'88) for \u945  = 0.95, 0.975 and 0.99\
VaR <- c()\
w  <- c()\
for (j in c(0.95, 0.975, 0.99))\{\
  for (i in seq(0,1,l=10001))\{\
    quant.X = quantile(-X(i), probs = j)\
    percent = paste(as.character(j*100),'%', sep = '')\
    my_index = i*10001 + 1\
    VaR[my_index] <- unname(quant.X[percent])\
    w[my_index]  <- i\
  \}\
  print('--------------------------------------------------------------------------------')\
  op_w = w[which(VaR == min(VaR, na.rm = TRUE))]\
  print(glue('for \uc0\u945  = \{j\}:'))\
  print(glue('optimal \uc0\u969  = \{op_w\}, \u956 (\u969 \'88) = \{mu(op_w)\}, \u963 (\u969 \'88) = \{sqrt(sig_sq(op_w))\}'))\
\}}